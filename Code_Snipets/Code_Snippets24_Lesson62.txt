Given:
class Plane {
static String s = "-";
public static void main(String[] args) { 
	new Plane().s1();
	System.out.println(s);
}
	void s1() { 
		try { 
		s2(); 
	} catch (Exception e) { s += "c"; }
	}
void s2() throws Exception { s3(); s += "2"; s3(); s += "2b";
}
void s3() throws Exception { throw new Exception();
}}


What is the result?
Α. -
B. -c
C. -c2
D. -2c
E. -c22b
F. -2c2b
G. -2c2bc
H. Compilation fails

Answer : B;



=========================

Given:
try { int x = Integer.parseInt("two"); }
Which could be used to create an appropriate catch block? (Choose all that apply.)
A. ClassCastException
B. IllegalStateException
C. NumberFormatException
D. IllegalArgumentException
E. ExceptionInInitializerError
F. ArrayIndexOutOfBoundsException
answer: C,D


=============================


Q> Given:
1. class Loopy {
2. public static void main(String[] args) {
3. int[] x = {7,6,5,4,3,2,1};
4.
// insert code here
5. System.out.print(y + " ");
6.}
7.}
}
Which, inserted independently at line 4, compiles? (Choose all that apply.)
A. for(int y: x) {}
B. for(x: int y) {}
C. int y = 0; for(y: x) {}
D. for(int y=0, z=0; z<x.length; z++) { y = x[z]; }
E. for(int y=0, int z=0; z<x.length; z++) { y = x[z];}
F. int y = 0; for(int z=0; z<x.length; z++) { y = x[z];}

Answer : A, D ,F 

============================

class Emu {
static String s = "-";
public static void main(String[] args) {
try {
throw new Exception();
} catch (Exception e) {
try {
try { throw new Exception();
} catch (Exception ex) { s += "ic "; }
throw new Exception(); }
catch (Exception x) { s += "mc "; }
finally { s += "mf "; }
} finally { s += "of "; }
System.out.println(s);
}
}

What is the result?
A. -ic of
B. -mf of
C. -mc mf
D. -ic mf of
E. -ic mc mf of
F. -ic mc of mf
G. Compilation fails
Answer: E

====================


Given:
3. class SubException extends Exception { }//Parentexception type
4. class SubSubException extends SubException { }//Childexception type
5.
6. public class CC { void doStuff() throws SubException {} }//Parent
7.
8. class CC2 extends CC { void doStuff() throws SubSubException { }}//Child
9.
10. class CC3 extends CC { void doStuff() throws Exception {} }//Child::CE(voilate the rule of overriding)
11.
12. class CC4 extends CC { void doStuff(int x) throws Exception {} }//child
13.
14. class CC5 extends CC { void doStuff() { } }//Child
What is the result? (Choose all that apply.)
A. Compilation succeeds
B. Compilation fails due to an error on line 8
C. Compilation fails due to an error on line 10
D. Compilation fails due to an error on line 12
E. Compilation fails due to an error on line 14
Answer: C


============================

Given:
public class Ebb {
 static int x = 7;
public static void main(String[] args) {
String s = "";
for(int y = 0; y < 3; y++) {
x++;
switch(x) {
case 8: s += "8 ";
case 9: s += "9 ";
case 10: { s+= "10 "; break; }
default: s += "d";
case 13: s+= "13 ";

 }
}

System.out.println(s);
}
 static {x++; }
 }

A. 9 10 d
B. 8 9 10 d
C. 9 10 10 d
D. 9 10 10 d 13
Ε. 8 9 10 10 d 13
F. 8 9 10 9 10 10 d 13
G. Compilation fails

======================

Given:
3. class Infinity {}
4. public class Beyond extends Infinity {
5. static Integer i;
6. public static void main(String[] args) {
7.int sw = (int)(Math.random() * 3);
8.switch(sw) {
9.case 0: { for(int x = 10; x > 5; x++)
10.if(x > 10000000) x = 10;
11.break; }
12.case 1: { int y = 7 * i; break; }
13.case 2: { Infinity inf = new Beyond(); Beyond b = (Beyond)inf; }
14.
15. }
16. }
17.}
And given that line 7 will assign the value 0, 1, or 2 to sw, which are true? (Choose all that apply.)
A. Compilation fails
B. A ClassCastException might be thrown
C. A StackOverflowError might be thrown
D. A NullPointerException might be thrown
E. An IllegalStateException might be thrown
F. The program might hang without ever completing

And given that line 7 will assign the value 0, 1, or 2 to sw, which are true? (Choose all that apply.)
A. Compilation fails
B. A ClassCastException might be thrown
C. A StackOverflowError might be thrown
D. A NullPointerException might be thrown
E. An IllegalStateException might be thrown
F. The program might hang without ever completing
G. The program will always complete without exception
Answer: D.F

